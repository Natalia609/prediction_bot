import telebot
import os
import logging
import numpy as np
from PIL import Image
from telebot import types, apihelper
import sqlite3
import bcrypt
import time
from flask import Flask, request
import requests  # –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ —Å–µ–∫—Ü–∏—é –∏–º–ø–æ—Ä—Ç–æ–≤

TOKEN = '7478069267:AAGiHm9F4LeuV_UYSnXY7ht0lrZx0LPXwHA'
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


apihelper.ENABLE_MIDDLEWARE = True
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Render
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
TEMP_DIR = os.path.join(BASE_DIR, 'temp')
DATABASE_PATH = os.path.join(BASE_DIR, 'users.db')
WEBHOOK_URL = 'https://prediction-bot-1-0753.onrender.com/webhook'  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render
PORT = int(os.environ.get('PORT', 10000))  # Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç 10000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞
THRESHOLD = 45  # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
IMAGE_SIZE = (200, 200)  # –†–∞–∑–º–µ—Ä –¥–ª—è —Ä–µ—Å–∞–π–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

def check_telegram_connection():
    try:
        response = requests.get(
            f"https://api.telegram.org/bot7478069267:AAGiHm9F4LeuV_UYSnXY7ht0lrZx0LPXwHA/getMe",
            timeout=5
        )
        logger.info(f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}")
        logger.debug(f"–û—Ç–≤–µ—Ç Telegram API: {response.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")

# –í—ã–∑–æ–≤–∏—Ç–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
check_telegram_connection()
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def create_connection():
    return sqlite3.connect('users.db', check_same_thread=False)


def init_db():
    db_path = 'users.db'
    if os.path.exists(db_path):
        try:
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            cursor.execute("SELECT registered FROM users LIMIT 1")
            conn.close()
        except sqlite3.OperationalError:
            os.remove(db_path)
            logger.info("–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT,
            password_hash TEXT,
            is_admin BOOLEAN DEFAULT 0,
            prediction_count INTEGER DEFAULT 0,
            registered BOOLEAN DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()


init_db()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def hash_password(password):
    return bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode('utf-8')


def check_password(hashed, password):
    return bcrypt.checkpw(password.encode(), hashed.encode('utf-8'))


def is_password_strong(password):
    return len(password) >= 8 and any(c.isdigit() for c in password) and any(c.isalpha() for c in password)


def is_registered(chat_id):
    try:
        conn = create_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT registered FROM users WHERE id=?", (chat_id,))
        result = cursor.fetchone()
        conn.close()
        return result and result[0]
    except sqlite3.Error as e:
        logger.error(f"Database error in is_registered: {e}")
        return False


def is_admin(chat_id):
    try:
        conn = create_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT is_admin FROM users WHERE id=?", (chat_id,))
        result = cursor.fetchone()
        conn.close()
        return result and result[0]
    except sqlite3.Error as e:
        logger.error(f"Database error in is_admin: {e}")
        return False
def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API"""
    url = f'https://api.telegram.org/bot{TOKEN}/sendMessage'
    payload = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    
    if reply_markup:
        payload['reply_markup'] = json.dumps(reply_markup)
        
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
        return False


def set_main_menu(chat_id):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    menu = {
        'keyboard': [
            [{"text": "üì∏ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"}],
            [{"text": "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"}, {"text": "üÜò –ü–æ–º–æ—â—å"}]
        ],
        'resize_keyboard': True
    }
    if is_admin(chat_id):
        menu['keyboard'].append([{"text": "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"}])
    send_message(chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", menu)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserState:
    AWAIT_PASSWORD_REGISTER = 1
    AWAIT_PASSWORD_LOGIN = 2
    AWAIT_ADMIN_ACTION = 3
    AWAIT_USER_ID_DELETE = 4
    AWAIT_USER_ID_PROMOTE = 5
    AWAIT_USER_ID_RESET = 6


user_states = {}


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def check_registration(func):
    def wrapper(message):
        if not is_registered(message.chat.id):
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /register")
            return
        return func(message)

    return wrapper

@app.route('/webhook', methods=['POST'])
def webhook_handler():
    try:
        data = request.get_json()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {data}")
        
        if 'message' in data:
            handle_message(data['message'])
            
        return jsonify({'status': 'ok'}), 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
        return jsonify({'status': 'error'}), 500

# ... –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

def handle_command(chat_id, command, message):
    if command == '/start':
        handle_start(chat_id)
    elif command == '/register':
        start_registration(chat_id)
    elif command == '/login':
        start_login(chat_id)
    elif command == '/logout':
        handle_logout(chat_id)
    elif command == '/admin':
        handle_admin(chat_id)
    elif command == 'üì∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ':
        handle_predict_image(chat_id)
    elif command == 'üìä –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        handle_stats(chat_id)
    elif command == 'üÜò –ø–æ–º–æ—â—å':
        handle_help(chat_id)
    else:
        send_message(chat_id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

def handle_start(chat_id):
    if is_registered(chat_id):
        show_main_menu(chat_id)
    else:
        send_message(chat_id, 
            "üëã –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞")

def start_login(chat_id):
    if is_registered(chat_id):
        user_states[chat_id] = UserState.AWAIT_PASSWORD_LOGIN
        send_message(chat_id, "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    else:
        send_message(chat_id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register")

def process_login(chat_id, password):
    with create_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT password_hash FROM users WHERE id=?", (chat_id,))
        result = cursor.fetchone()
        
    if result and check_password(result[0], password):
        send_message(chat_id, "üîì –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        show_main_menu(chat_id)
    else:
        send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
    del user_states[chat_id]

def handle_logout(chat_id):
    if chat_id in user_states:
        del user_states[chat_id]
    send_message(chat_id, "üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã", create_keyboard([]))

def handle_admin(chat_id):
    if not is_admin(chat_id):
        send_message(chat_id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    admin_menu = create_keyboard([
        [{"text": "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"}, {"text": "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}],
        [{"text": "üëë –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"}, {"text": "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å"}],
        [{"text": "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"}]
    ])
    user_states[chat_id] = UserState.AWAIT_ADMIN_ACTION
    send_message(chat_id, "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", admin_menu)

def handle_admin_action(chat_id, text):
    if text == "üìã —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
        show_users_list(chat_id)
    elif text == "‚ùå —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        user_states[chat_id] = UserState.AWAIT_USER_ID_DELETE
        send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    elif text == "üëë –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
        user_states[chat_id] = UserState.AWAIT_USER_ID_PROMOTE
        send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è:")
    elif text == "üîÑ —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å":
        user_states[chat_id] = UserState.AWAIT_USER_ID_RESET
        send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:")
    elif text == "üîô –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        del user_states[chat_id]
        show_main_menu(chat_id)

def show_users_list(chat_id):
    with create_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id, username, is_admin, prediction_count FROM users")
        users = cursor.fetchall()
    
    response = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user in users:
        response += (
            f"üÜî ID: {user[0]}\n"
            f"üë§ –ò–º—è: {user[1]}\n"
            f"üëë –ê–¥–º–∏–Ω: {'–î–∞' if user[2] else '–ù–µ—Ç'}\n"
            f"üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {user[3]}\n\n"
        )
    send_message(chat_id, response)

def handle_predict_image(chat_id):
    if not is_registered(chat_id):
        send_message(chat_id, "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!")
        return
    send_message(chat_id, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")

def handle_stats(chat_id):
    with create_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT prediction_count FROM users WHERE id=?", (chat_id,))
        count = cursor.fetchone()[0]
    send_message(chat_id, f"üìä –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ {count} –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π")

def handle_help(chat_id):
    help_text = (
        "üÜò –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/login - –í—Ö–æ–¥\n"
        "/logout - –í—ã—Ö–æ–¥\n"
        "/admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)\n"
        "üì∏ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "üÜò –ü–æ–º–æ—â—å"
    )
    send_message(chat_id, help_text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
def process_user_delete(chat_id, user_id):
    try:
        with create_connection() as conn:
            conn.execute("DELETE FROM users WHERE id=?", (user_id,))
        send_message(chat_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
        send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
    finally:
        del user_states[chat_id]

def process_user_promote(chat_id, user_id):
    try:
        with create_connection() as conn:
            conn.execute("UPDATE users SET is_admin=1 WHERE id=?", (user_id,))
        send_message(chat_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å—Ç–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {str(e)}")
        send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    finally:
        del user_states[chat_id]

def process_password_reset(chat_id, user_id):
    try:
        temp_pass = "temp123"
        with create_connection() as conn:
            conn.execute(
                "UPDATE users SET password_hash=? WHERE id=?",
                (hash_password(temp_pass), user_id)
            )
        send_message(chat_id, f"‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω. –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {temp_pass}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: {str(e)}")
        send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è")
    finally:
        del user_states[chat_id]

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è handle_message
def handle_message(message):
    chat_id = message['chat']['id']
    text = message.get('text', '').lower()
    
    if text.startswith('/'):
        handle_command(chat_id, text, message)
    elif chat_id in user_states:
        handle_user_state(chat_id, text)
    else:
        send_message(chat_id, f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {text}")

def handle_user_state(chat_id, text):
    state = user_states.get(chat_id)
    
    if state == UserState.AWAIT_PASSWORD_REGISTER:
        process_password(chat_id, text, message.get('from', {}).get('username'))
    elif state == UserState.AWAIT_PASSWORD_LOGIN:
        process_login(chat_id, text)
    elif state == UserState.AWAIT_ADMIN_ACTION:
        handle_admin_action(chat_id, text)
    elif state == UserState.AWAIT_USER_ID_DELETE:
        process_user_delete(chat_id, int(text))
    elif state == UserState.AWAIT_USER_ID_PROMOTE:
        process_user_promote(chat_id, int(text))
    elif state == UserState.AWAIT_USER_ID_RESET:
        process_password_reset(chat_id, int(text))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def handle_photo(message):
    chat_id = message['chat']['id']
    timestamp = int(time.time())
    temp_input = os.path.join(TEMP_DIR, f'input_{chat_id}_{timestamp}.jpg')
    temp_output = os.path.join(TEMP_DIR, f'output_{chat_id}_{timestamp}.jpg')

    try:
        os.makedirs(TEMP_DIR, exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with open(temp_input, 'wb') as f:
            f.write(downloaded_file)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img = Image.open(temp_input).convert('RGB')
        inverted = Image.eval(img, lambda x: 255 - x)
        inverted.save(temp_output, "JPEG")

        # –ê–Ω–∞–ª–∏–∑ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        gray = inverted.convert('L')
        gray_array = np.array(gray)
        std = gray_array.std()
        result = "–¥–µ–ª—å—Ñ–∏–Ω" if std < THRESHOLD else "—á–µ–ª–æ–≤–µ–∫"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        with open(temp_output, 'rb') as photo:
            bot.send_photo(
                chat_id,
                photo,
                caption=f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n"
                        f"üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {std:.1f}"
            )

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        with create_connection() as conn:
            conn.execute("UPDATE users SET prediction_count = prediction_count + 1 WHERE id=?", (chat_id,))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}", exc_info=True)
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for file_path in [temp_input, temp_output]:
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")

# –í–µ–±-—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

@app.route('/')
def home():
    return "Telegram Bot is Running!", 200

if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
    try:
        response = requests.post(
            f'https://api.telegram.org/bot{TOKEN}/setWebhook',
            json={'url': WEBHOOK_URL}
        )
        logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {response.json()}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
    
    app.run(host='0.0.0.0', port=10000)
