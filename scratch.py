import telebot
import os
import logging
import numpy as np
from PIL import Image
from telebot import types
import sqlite3
import bcrypt
import time
from flask import Flask, request

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot("7478069267:AAGiHm9F4LeuV_UYSnXY7ht0lrZx0LPXwHA")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Render
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
TEMP_DIR = os.path.join(BASE_DIR, 'temp')
DATABASE_PATH = os.path.join(BASE_DIR, 'users.db')
WEBHOOK_URL = 'https://prediction-bot-1-0753.onrender.com/webhook'  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render
PORT = int(os.environ.get('PORT', 10000))  # Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç 10000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞
THRESHOLD = 45  # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
IMAGE_SIZE = (200, 200)  # –†–∞–∑–º–µ—Ä –¥–ª—è —Ä–µ—Å–∞–π–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def create_connection():
    return sqlite3.connect('users.db', check_same_thread=False)


def init_db():
    db_path = 'users.db'
    if os.path.exists(db_path):
        try:
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            cursor.execute("SELECT registered FROM users LIMIT 1")
            conn.close()
        except sqlite3.OperationalError:
            os.remove(db_path)
            logger.info("–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT,
            password_hash TEXT,
            is_admin BOOLEAN DEFAULT 0,
            prediction_count INTEGER DEFAULT 0,
            registered BOOLEAN DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()


init_db()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def hash_password(password):
    return bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode('utf-8')


def check_password(hashed, password):
    return bcrypt.checkpw(password.encode(), hashed.encode('utf-8'))


def is_password_strong(password):
    return len(password) >= 8 and any(c.isdigit() for c in password) and any(c.isalpha() for c in password)


def is_registered(chat_id):
    try:
        conn = create_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT registered FROM users WHERE id=?", (chat_id,))
        result = cursor.fetchone()
        conn.close()
        return result and result[0]
    except sqlite3.Error as e:
        logger.error(f"Database error in is_registered: {e}")
        return False


def is_admin(chat_id):
    try:
        conn = create_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT is_admin FROM users WHERE id=?", (chat_id,))
        result = cursor.fetchone()
        conn.close()
        return result and result[0]
    except sqlite3.Error as e:
        logger.error(f"Database error in is_admin: {e}")
        return False


def get_main_menu_keyboard(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üì∏ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    markup.row("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üÜò –ü–æ–º–æ—â—å")
    if is_admin(chat_id):
        markup.row("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    return markup


# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserState:
    AWAIT_PASSWORD_REGISTER = 1
    AWAIT_PASSWORD_LOGIN = 2
    AWAIT_ADMIN_ACTION = 3
    AWAIT_USER_ID_DELETE = 4
    AWAIT_USER_ID_PROMOTE = 5
    AWAIT_USER_ID_RESET = 6


user_states = {}


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def check_registration(func):
    def wrapper(message):
        if not is_registered(message.chat.id):
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /register")
            return
        return func(message)

    return wrapper
    
@bot.middleware_handler(update_types=['message'])
def log_messages(bot_instance, message):
    logger.info(f"Received message: {message.text} | Chat ID: {message.chat.id} | User: {message.from_user.username}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def send_welcome(message):
    chat_id = message.chat.id
    if is_registered(chat_id):
        show_main_menu(chat_id)
    else:
        bot.send_message(chat_id,
                         "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
                         "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞")


def show_main_menu(chat_id):
    text = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    bot.send_message(chat_id, text, reply_markup=get_main_menu_keyboard(chat_id))


@bot.message_handler(commands=['register'])
def register_user(message):
    chat_id = message.chat.id
    if is_registered(chat_id):
        bot.send_message(chat_id, "‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return

    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users WHERE id=?", (chat_id,))

    if cursor.fetchone():
        bot.send_message(chat_id, "‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    else:
        user_states[chat_id] = UserState.AWAIT_PASSWORD_REGISTER
        bot.send_message(chat_id,
                         "üîê –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã):")
    conn.close()


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == UserState.AWAIT_PASSWORD_REGISTER)
def process_password(message):
    chat_id = message.chat.id
    password = message.text

    if not is_password_strong(password):
        bot.send_message(chat_id, "‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã.")
        return

    conn = create_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT id FROM users WHERE is_admin=1 LIMIT 1")
    is_admin_flag = 0 if cursor.fetchone() else 1

    cursor.execute('''
        INSERT INTO users 
        (id, username, password_hash, is_admin, registered)
        VALUES (?, ?, ?, ?, 1)
    ''', (chat_id, message.from_user.username, hash_password(password), is_admin_flag))

    conn.commit()
    conn.close()
    del user_states[chat_id]

    # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    text = "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!"
    if is_admin(chat_id):
        text += "\n‚ö° –í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —Ç–∞–∫ –∫–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–µ—Ä–≤—ã–º!"

    bot.send_message(chat_id, text)
    show_main_menu(chat_id)

@bot.message_handler(content_types=['text'])
def text_handler(message):
    try:
        response = f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {message.text}"
        logger.info(f"Preparing response: {response}")
        bot.send_message(message.chat.id, response)
    except Exception as e:
        logger.error(f"Error: {str(e)}")
        
@bot.message_handler(commands=['login'])
def login_user(message):
    chat_id = message.chat.id
    user_states[chat_id] = UserState.AWAIT_PASSWORD_LOGIN
    bot.send_message(chat_id, "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == UserState.AWAIT_PASSWORD_LOGIN)
def process_login(message):
    chat_id = message.chat.id
    password = message.text
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT password_hash FROM users WHERE id=?", (chat_id,))
    result = cursor.fetchone()

    if result and check_password(result[0], password):
        bot.send_message(chat_id, "üîì –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        show_main_menu(chat_id)
    else:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
    conn.close()
    del user_states[chat_id]


@bot.message_handler(commands=['logout'])
@check_registration
def logout_user(message):
    chat_id = message.chat.id
    if chat_id in user_states:
        del user_states[chat_id]
    bot.send_message(chat_id, "üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã", reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(commands=['admin'])
@check_registration
def admin_panel(message):
    chat_id = message.chat.id
    if not is_admin(chat_id):
        bot.send_message(chat_id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    markup.row("üëë –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å")
    markup.row("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    user_states[chat_id] = UserState.AWAIT_ADMIN_ACTION
    bot.send_message(chat_id, "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üì∏ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
@check_registration
def predict_image_handler(message):
    bot.send_message(message.chat.id, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")


@bot.message_handler(func=lambda message: message.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@check_registration
def show_stats_handler(message):
    chat_id = message.chat.id
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT prediction_count FROM users WHERE id=?", (chat_id,))
    count = cursor.fetchone()[0]
    conn.close()
    bot.send_message(chat_id, f"üìä –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ {count} –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π")


@bot.message_handler(func=lambda message: message.text == "üÜò –ü–æ–º–æ—â—å")
@check_registration
def show_help(message):
    chat_id = message.chat.id
    text = (
        "üÜò –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/login - –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç\n"
        "/logout - –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
        "üì∏ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á–µ–ª–æ–≤–µ–∫ –∏–ª–∏ –¥–µ–ª—å—Ñ–∏–Ω –Ω–∞ —Ñ–æ—Ç–æ\n"
        "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π\n"
    )
    if is_admin(chat_id):
        text += "/admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
    bot.send_message(chat_id, text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏–π
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == UserState.AWAIT_ADMIN_ACTION)
def handle_admin_actions(message):
    chat_id = message.chat.id

    if message.text == "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
        conn = create_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT id, username, is_admin, prediction_count FROM users")
        users = cursor.fetchall()
        response = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users:
            response += (
                f"üÜî ID: {user[0]}\n"
                f"üë§ –ò–º—è: {user[1]}\n"
                f"üëë –ê–¥–º–∏–Ω: {'–î–∞' if user[2] else '–ù–µ—Ç'}\n"
                f"üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {user[3]}\n\n"
            )
        conn.close()
        bot.send_message(chat_id, response)

    elif message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        user_states[chat_id] = UserState.AWAIT_USER_ID_DELETE
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

    elif message.text == "üëë –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
        user_states[chat_id] = UserState.AWAIT_USER_ID_PROMOTE
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è:")

    elif message.text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å":
        user_states[chat_id] = UserState.AWAIT_USER_ID_RESET
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:")

    elif message.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        del user_states[chat_id]
        show_main_menu(chat_id)


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == UserState.AWAIT_USER_ID_DELETE)
def process_user_delete(message):
    chat_id = message.chat.id
    try:
        user_id = int(message.text)
        conn = create_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM users WHERE id=?", (user_id,))
        conn.commit()
        conn.close()
        bot.send_message(chat_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
    finally:
        del user_states[chat_id]


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == UserState.AWAIT_USER_ID_PROMOTE)
def process_user_promote(message):
    chat_id = message.chat.id
    try:
        user_id = int(message.text)
        conn = create_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET is_admin=1 WHERE id=?", (user_id,))
        conn.commit()
        conn.close()
        bot.send_message(chat_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å—Ç–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    finally:
        del user_states[chat_id]


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == UserState.AWAIT_USER_ID_RESET)
def process_password_reset(message):
    chat_id = message.chat.id
    try:
        user_id = int(message.text)
        temp_pass = "temp123"
        conn = create_connection()
        cursor = conn.cursor()
        cursor.execute(
            "UPDATE users SET password_hash=? WHERE id=?",
            (hash_password(temp_pass), user_id))
        conn.commit()
        conn.close()
        bot.send_message(chat_id, f"‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω. –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {temp_pass}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: {e}")
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è")
    finally:
        del user_states[chat_id]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@bot.message_handler(content_types=['photo'])
@check_registration
def handle_photo(message):
    chat_id = message.chat.id
    timestamp = int(time.time())
    temp_input = os.path.join(TEMP_DIR, f'input_{chat_id}_{timestamp}.jpg')
    temp_output = os.path.join(TEMP_DIR, f'output_{chat_id}_{timestamp}.jpg')

    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É temp –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(TEMP_DIR, exist_ok=True)
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        with open(temp_input, 'wb') as f:
            f.write(downloaded_file)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img = Image.open(temp_input)
        img = img.convert('RGB')

        # –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
        inverted = Image.eval(img, lambda x: 255 - x)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        inverted.save(temp_output, "JPEG")

        # –ê–Ω–∞–ª–∏–∑ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        gray = inverted.convert('L')
        gray_array = np.array(gray)
        std = gray_array.std()
        result = "–¥–µ–ª—å—Ñ–∏–Ω" if std < THRESHOLD else "—á–µ–ª–æ–≤–µ–∫"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        with open(temp_output, 'rb') as photo:
            bot.send_photo(
                chat_id,
                photo
            )

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        conn = create_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET prediction_count = prediction_count + 1 WHERE id=?", (chat_id,))
        conn.commit()
        conn.close()


    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")


    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for file_path in [temp_input, temp_output]:
            if os.path.exists(file_path):
                try:
                    os.remove(file_path)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
 # –í–µ–±-—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

    @app.route('/webhook', methods=['POST'])
    def webhook():
        logger.info("Incoming webhook request")  # –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if request.headers.get('content-type') == 'application/json':
            json_data = request.get_data().decode('utf-8')
            update = telebot.types.Update.de_json(json_data)
            bot.process_new_updates([update])
            return 'OK', 200
        logger.error("Invalid request content-type")
        return 'Invalid request', 403

    @app.route('/')
    def home():

        return "Telegram Bot is Running!"


if __name__ == '__main__':
    os.makedirs(TEMP_DIR, exist_ok=True)
    init_db()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
    bot.remove_webhook()
    time.sleep(1)
    bot.set_webhook("https://prediction-bot-1-0753.onrender.com/webhook")  # –î–æ–±–∞–≤—å—Ç–µ –∫–∞–≤—ã—á–∫–∏
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.run(host='0.0.0.0', port=PORT)
