import telebot
import os
import logging
import numpy as np
from PIL import Image
from telebot import types, apihelper
import sqlite3
from telegram import ReplyKeyboardMarkup
import bcrypt
import json
import time
from flask import Flask, request, jsonify
import requests  # –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ —Å–µ–∫—Ü–∏—é –∏–º–ø–æ—Ä—Ç–æ–≤

TOKEN = '7478069267:AAGiHm9F4LeuV_UYSnXY7ht0lrZx0LPXwHA'
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


apihelper.ENABLE_MIDDLEWARE = True
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Render
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
TEMP_DIR = os.path.join(BASE_DIR, 'temp')
DATABASE_PATH = os.path.join(BASE_DIR, 'users.db')
WEBHOOK_URL = 'https://prediction-bot-1-0753.onrender.com/webhook'  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render
PORT = int(os.environ.get('PORT', 10000))  # Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç 10000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞
THRESHOLD = 45  # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
IMAGE_SIZE = (200, 200)  # –†–∞–∑–º–µ—Ä –¥–ª—è —Ä–µ—Å–∞–π–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

def check_telegram_connection():
    try:
        response = requests.get(
            f"https://api.telegram.org/bot7478069267:AAGiHm9F4LeuV_UYSnXY7ht0lrZx0LPXwHA/getMe",
            timeout=5
        )
        logger.info(f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}")
        logger.debug(f"–û—Ç–≤–µ—Ç Telegram API: {response.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")

# –í—ã–∑–æ–≤–∏—Ç–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
check_telegram_connection()
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def create_connection():
    return sqlite3.connect('users.db', check_same_thread=False)


def init_db():
    db_path = 'users.db'
    if os.path.exists(db_path):
        try:
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            cursor.execute("SELECT registered FROM users LIMIT 1")
            conn.close()
        except sqlite3.OperationalError:
            os.remove(db_path)
            logger.info("–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT,
            password_hash TEXT,
            is_admin BOOLEAN DEFAULT 0,
            prediction_count INTEGER DEFAULT 0,
            registered BOOLEAN DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()


init_db()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def hash_password(password):
    return bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode('utf-8')


def check_password(hashed, password):
    return bcrypt.checkpw(password.encode(), hashed.encode('utf-8'))


def is_password_strong(password):
    return len(password) >= 8 and any(c.isdigit() for c in password) and any(c.isalpha() for c in password)


def is_registered(chat_id):
    try:
        conn = create_connection()
        cursor = conn.cursor()
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É registered=1
        cursor.execute("SELECT id FROM users WHERE id=? AND registered=1", (chat_id,))
        result = cursor.fetchone() is not None
        conn.close()
        logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {chat_id}: {result}")
        return result
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î –≤ is_registered: {e}")
        return False
        
def is_admin(chat_id):
    try:
        conn = create_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT is_admin FROM users WHERE id=?", (chat_id,))
        result = cursor.fetchone()
        conn.close()
        return result and result[0]
    except sqlite3.Error as e:
        logger.error(f"Database error in is_admin: {e}")
        return False
def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API"""
    url = f'https://api.telegram.org/bot{TOKEN}/sendMessage'
    payload = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    
    if reply_markup:
        payload['reply_markup'] = json.dumps(reply_markup)
        
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
        return False
        
def create_keyboard(buttons, resize=True, one_time=False):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ Telegram API"""
    return {
        "keyboard": buttons,
        "resize_keyboard": resize,
        "one_time_keyboard": one_time
    }


def set_main_menu(chat_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    if not check_auth(chat_id):
        return
    buttons = [
        [{"text": "üì∏ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"}],
        [{"text": "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"}, {"text": "üÜò –ü–æ–º–æ—â—å"}]
    ]
    
    if is_admin(chat_id):
        buttons.append([{"text": "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"}])
    
    keyboard = create_keyboard(buttons)
    send_message(chat_id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    
logged_users = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserState:
    AWAIT_PASSWORD_REGISTER = 1
    AWAIT_PASSWORD_LOGIN = 2
    AWAIT_ADMIN_ACTION = 3
    AWAIT_USER_ID_DELETE = 4
    AWAIT_USER_ID_PROMOTE = 5
    AWAIT_USER_ID_RESET = 6
    LOGGED_IN = 7
    LOGGED_OUT = 8  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


user_states = {}


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def check_registration(func):
    def wrapper(message):
        if not is_registered(message.chat.id):
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /register")
            return
        return func(message)

    return wrapper

@app.route('/webhook', methods=['POST'])
def webhook_handler():
    try:
        data = request.get_json()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {data}")
        
        if 'message' in data:
            message = data['message']
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
            if 'photo' in message:
                handle_photo(message)
                return jsonify({'status': 'ok'}), 200
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
            chat = message.get('chat', {})
            chat_id = chat.get('id')
            text = message.get('text', '').strip()
            username = message.get('from', {}).get('username')

            if chat_id:
                if user_states.get(chat_id):
                    handle_user_state(chat_id, text, message)
                else:
                    handle_command(chat_id, text, message)
            
        return jsonify({'status': 'ok'}), 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}", exc_info=True)
        return jsonify({'status': 'error'}), 500

# ... –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
def start_registration(chat_id):
    try:
        if chat_id in user_states:
            send_message(chat_id, "‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!")
            return
            
        if is_registered(chat_id):
            send_message(chat_id, "‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            return
        
        user_states[chat_id] = UserState.AWAIT_PASSWORD_REGISTER
        send_message(chat_id, "üîê –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã):")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

def process_password(chat_id, password, username):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
        if not is_password_strong(password):
            send_message(chat_id, "‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã!")
            return

        with create_connection() as conn:
            cursor = conn.cursor()
            
            try:
                # –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                conn.execute("BEGIN IMMEDIATE")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
                cursor.execute("SELECT id FROM users WHERE id=? LIMIT 1", (chat_id,))
                if cursor.fetchone():
                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {chat_id}")
                    send_message(chat_id, "‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
                    conn.rollback()
                    return

                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                cursor.execute("SELECT id FROM users WHERE is_admin=1 LIMIT 1")
                is_admin_flag = 0 if cursor.fetchone() else 1

                # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
                cursor.execute('''
                    INSERT OR IGNORE INTO users 
                        (id, username, password_hash, is_admin, registered)
                    VALUES (?, ?, ?, ?, 1)
                ''', (chat_id, username, hash_password(password), is_admin_flag))
                
                if cursor.rowcount == 0:
                    raise sqlite3.IntegrityError("Duplicate user ID")
                
                conn.commit()
                logger.info(f"–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {chat_id}")

            except sqlite3.IntegrityError as e:
                logger.error(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
                send_message(chat_id, "‚ùå –ê–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                conn.rollback()
                return
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {str(e)}")
                conn.rollback()
                raise

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        if chat_id in user_states:
            del user_states[chat_id]
            
        text = "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!" + ("\n‚ö° –í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!" if is_admin_flag else "")
        send_message(chat_id, text)
        set_main_menu(chat_id)

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}\n{traceback.format_exc()}")
        send_message(chat_id, "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
def handle_command(chat_id, command, message):
    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∫—Ä–æ–º–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–≤—Ö–æ–¥–∞
    if command.lower() in ['/start', '/register', '/login']:
        if command == '/start':
            handle_start(chat_id)
        elif command == '/register':
            start_registration(chat_id)
        elif command == '/login':
            start_login(chat_id)
        return
    
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not is_logged_in(chat_id):
        send_message(chat_id, "üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login")
        return
            
    if command == '/start':
        handle_start(chat_id)
    elif command == '/register':
        start_registration(chat_id)
    elif command == '/login':
        start_login(chat_id)
    elif command == '/logout':
        handle_logout(chat_id)
    elif command == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
        handle_admin(chat_id)
    elif command == 'üì∏ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ':
        handle_predict_image(chat_id)
    elif command == 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        handle_stats(chat_id)
    elif command == 'üÜò –ü–æ–º–æ—â—å':
        handle_help(chat_id)    
    else:
        send_message(chat_id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        
def handle_start(chat_id):
    if is_registered(chat_id):
        if is_logged_in(chat_id):
            set_main_menu(chat_id)
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—Ö–æ–¥–∞
            keyboard = create_keyboard([["/login"]])
            send_message(chat_id, "üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login", reply_markup=keyboard)
    else:
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        keyboard = create_keyboard([["/register"]])
        send_message(
            chat_id, 
            "üëã –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register", 
            reply_markup=keyboard
        )
        
def start_login(chat_id):
    if chat_id in user_states:
        send_message(chat_id, "‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é!")
        return
        
    if is_registered(chat_id):
        user_states[chat_id] = UserState.AWAIT_PASSWORD_LOGIN
        send_message(chat_id, "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    else:
        send_message(chat_id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register")


def process_login(chat_id, password):
    try:
        with create_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT password_hash FROM users WHERE id=?", (chat_id,))
            result = cursor.fetchone()
        
        if result and check_password(result[0], password):
            logged_users.add(chat_id)
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            set_main_menu(chat_id)
            send_message(chat_id, "üîì –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
            set_main_menu(chat_id)
        else:
            send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {str(e)}")
        send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ")
    
    finally:
        if chat_id in user_states:
            del user_states[chat_id]
        
def is_logged_in(chat_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π"""
    # –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    
    if chat_id in logged_users:
        return True
    
    # –†–µ–∑–µ—Ä–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ë–î
    try:
        with create_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT registered FROM users WHERE id=?", (chat_id,))
            result = cursor.fetchone()
            if result and result[0]:
                logged_users.add(chat_id)  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
                return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
    
    return False

def check_auth(chat_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–≤—Ö–æ–¥–∞"""
    if not is_registered(chat_id) and user_states.get(chat_id) != UserState.AWAIT_PASSWORD_REGISTER:
        # –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        return True
    return chat_id in logged_users


def handle_logout(chat_id):
    if chat_id in logged_users:
        logged_users.remove(chat_id)
    if chat_id in user_states:
        del user_states[chat_id]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—Ö–æ–¥–∞
    keyboard = create_keyboard([["/register", "/login"]])
    send_message(
        chat_id, 
        "üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:", 
        reply_markup=keyboard
    )
    
def handle_admin(chat_id):
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if not is_registered(chat_id):
        send_message(chat_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥!")
        return
        
    if not is_admin(chat_id):
        send_message(chat_id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    admin_buttons = [
        [{"text": "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"}, {"text": "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}],
        [{"text": "üëë –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"}, {"text": "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å"}],
        [{"text": "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"}]
    ]
    admin_menu = create_keyboard(admin_buttons)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[chat_id] = UserState.AWAIT_ADMIN_ACTION
    send_message(chat_id, "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu)

def handle_admin_action(chat_id, text):
    if text == "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
        show_users_list(chat_id)
    elif text == "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        user_states[chat_id] = UserState.AWAIT_USER_ID_DELETE
        send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    elif text == "üëë –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
        user_states[chat_id] = UserState.AWAIT_USER_ID_PROMOTE
        send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è:")
    elif text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å":
        user_states[chat_id] = UserState.AWAIT_USER_ID_RESET
        send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:")
    elif text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        del user_states[chat_id]
        set_main_menu(chat_id)

def show_users_list(chat_id):
    with create_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT id, username, is_admin, prediction_count FROM users")
        users = cursor.fetchall()
    
    response = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user in users:
        response += (
            f"üÜî ID: {user[0]}\n"
            f"üë§ –ò–º—è: {user[1]}\n"
            f"üëë –ê–¥–º–∏–Ω: {'–î–∞' if user[2] else '–ù–µ—Ç'}\n"
            f"üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {user[3]}\n\n"
        )
    send_message(chat_id, response)

def handle_predict_image(chat_id):
    if not is_registered(chat_id):
        send_message(chat_id, "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!")
        return
    send_message(chat_id, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")

def handle_stats(chat_id):
    if not is_registered(chat_id):
        send_message(chat_id, "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!")
        return
    with create_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT prediction_count FROM users WHERE id=?", (chat_id,))
        count = cursor.fetchone()[0]
    send_message(chat_id, f"üìä –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ {count} –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π")

def handle_help(chat_id):
    if not is_registered(chat_id):
        send_message(chat_id, "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!")
        return
    help_text = (
        "üÜò –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/login - –í—Ö–æ–¥\n"
        "/logout - –í—ã—Ö–æ–¥\n"
        "/admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)\n"
        "üì∏ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "üÜò –ü–æ–º–æ—â—å"
    )
    send_message(chat_id, help_text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
def process_user_delete(chat_id, user_id):
   try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with create_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id FROM users WHERE id=?", (user_id,))
            if not cursor.fetchone():
                send_message(chat_id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return False
                
            conn.execute("DELETE FROM users WHERE id=?", (user_id,))
            conn.commit()
            
        send_message(chat_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω!")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
        send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
        return False

def process_user_promote(chat_id, user_id):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with create_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id FROM users WHERE id=?", (user_id,))
            if not cursor.fetchone():
                send_message(chat_id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return False
                
            cursor.execute("UPDATE users SET is_admin=1 WHERE id=?", (user_id,))
            conn.commit()
            
        send_message(chat_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å—Ç–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {str(e)}")
        send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return False

def process_password_reset(chat_id, user_id):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with create_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id FROM users WHERE id=?", (user_id,))
            if not cursor.fetchone():
                send_message(chat_id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return False
                
            temp_pass = "temp123"
            cursor.execute(
                "UPDATE users SET password_hash=? WHERE id=?",
                (hash_password(temp_pass), user_id)
            )
            conn.commit()
            
        send_message(chat_id, f"‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω. –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {temp_pass}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: {str(e)}")
        send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è")
        return False

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è handle_message
def handle_message(message):
    chat_id = message['chat']['id']
    if not check_auth(chat_id) and message.get('text') not in ['/register', '/login']:
        return
    text = message.get('text', '').lower()
    
    if text.startswith('/'):
        handle_command(chat_id, text, message)
    elif chat_id in user_states:
        handle_user_state(chat_id, text)
    else:
        send_message(chat_id, f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {text}")

def handle_user_state(chat_id, text, message):  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä message
    state = user_states.get(chat_id)
    
    if state == UserState.AWAIT_PASSWORD_REGISTER:
        username = message.get('from', {}).get('username', 'unknown')
        process_password(chat_id, text, username)
        
    elif state == UserState.AWAIT_PASSWORD_LOGIN:
        process_login(chat_id, text)
        
    elif state == UserState.AWAIT_ADMIN_ACTION:
        handle_admin_action(chat_id, text)
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–≤–æ–¥–∞
    elif state == UserState.AWAIT_USER_ID_DELETE:
        try:
            user_id = int(text)
            if process_user_delete(chat_id, user_id):
                del user_states[chat_id]  # –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        except ValueError:
            send_message(chat_id, "‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:")
            # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
            
    elif state == UserState.AWAIT_USER_ID_PROMOTE:
        try:
            user_id = int(text)
            if process_user_promote(chat_id, user_id):
                del user_states[chat_id]  # –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        except ValueError:
            send_message(chat_id, "‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:")
            # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
            
    elif state == UserState.AWAIT_USER_ID_RESET:
        try:
            user_id = int(text)
            if process_password_reset(chat_id, user_id):
                del user_states[chat_id]  # –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        except ValueError:
            send_message(chat_id, "‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:")
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def handle_photo(message_data):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_id = message_data['chat']['id']
        if not check_auth(chat_id):
            return
        photos = message_data.get('photo', [])
        
        if not photos:
            send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return

        # –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        photo = max(photos, key=lambda x: x['file_size']) if len(photos) > 1 else photos[-1]
        file_id = photo['file_id']

        # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞
        file_info_url = f"https://api.telegram.org/bot{TOKEN}/getFile?file_id={file_id}"
        file_response = requests.get(file_info_url).json()
        
        if not file_response.get('ok'):
            raise Exception("File info request failed")

        file_path = file_response['result']['file_path']
        download_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_path}"

        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        response = requests.get(download_url)
        if response.status_code != 200:
            raise Exception("Failed to download image")

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        timestamp = int(time.time())
        os.makedirs(TEMP_DIR, exist_ok=True)
        input_path = os.path.join(TEMP_DIR, f'input_{chat_id}_{timestamp}.jpg')
        output_path = os.path.join(TEMP_DIR, f'output_{chat_id}_{timestamp}.jpg')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with open(input_path, 'wb') as f:
            f.write(response.content)

        # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞
        with Image.open(input_path) as img:
            rgb_img = img.convert('RGB')
            inverted = Image.eval(rgb_img, lambda x: 255 - x)
            inverted.save(output_path, "JPEG")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open(output_path, 'rb') as photo_file:
            files = {'photo': photo_file}
            caption = "üñº –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞)"
            response = requests.post(
                f"https://api.telegram.org/bot{TOKEN}/sendPhoto",
                data={'chat_id': chat_id, 'caption': caption},
                files=files
            )

        if response.status_code != 200:
            raise Exception("Failed to send photo")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        with create_connection() as conn:
            conn.execute("UPDATE users SET prediction_count = prediction_count + 1 WHERE id=?", (chat_id,))
            conn.commit()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}", exc_info=True)
        send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for path in [input_path, output_path]:
            try:
                if path and os.path.exists(path):
                    os.remove(path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")

# –í–µ–±-—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

@app.route('/')
def home():
    return "Telegram Bot is Running!", 200

if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
    try:
        response = requests.post(
            f'https://api.telegram.org/bot{TOKEN}/setWebhook',
            json={'url': WEBHOOK_URL}
        )
        logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {response.json()}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
    
    app.run(host='0.0.0.0', port=10000)
