import telebot
import os
import logging
import numpy as np
import tensorflow as tf
from keras.utils import load_img, img_to_array
from telebot import types
import sqlite3
import bcrypt
from flask import Flask, request, abort
import secrets
import io

SECRET_TOKEN = "Jt9V3Lp"
TELEGRAM_TOKEN="7478069267:AAH3DIWIPLa9NXwN7bwpU5i7VkTychXeFqw"
PORT = int(os.environ.get('PORT', 10000))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask
bot = telebot.TeleBot(TELEGRAM_TOKEN)
app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
MODEL_URL = "https://github.com/Natalia609/prediction_bot/releases/download/v1.0.0/people_dolphin_classifier.h5"
MODEL_PATH = "people_dolphin_classifier.h5"


def download_model():
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å"""
    if not os.path.exists(MODEL_PATH):
        logger.info("Downloading model...")
        try:
            response = requests.get(MODEL_URL, stream=True)
            response.raise_for_status()
            with open(MODEL_PATH, "wb") as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            logger.info("Model downloaded successfully!")
        except Exception as e:
            logger.error(f"Model download failed: {e}")
            raise


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
try:
    download_model()
    model = tf.keras.models.load_model(MODEL_PATH)
    logger.info("Model loaded successfully!")
except Exception as e:
    logger.error(f"Failed to load model: {e}")
    model = None
    if os.environ.get('REQUIRE_MODEL', 'True') == 'True':
        exit(1)


# Webhook handling
@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('X-Telegram-Bot-Api-Secret-Token') != SECRET_TOKEN:
        abort(403)

    if request.content_type == 'application/json':
        json_data = request.get_json()
        update = telebot.types.Update.de_json(json_data)
        bot.process_new_updates([update])
        return '', 200
    abort(400)


def set_telegram_webhook():
    webhook_url = f"{os.environ.get('RENDER_EXTERNAL_URL')}/webhook"

    try:
        response = requests.post(
            f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook',
            json={
                'url': webhook_url,
                'secret_token': SECRET_TOKEN,
                'allowed_updates': ['message', 'callback_query'],
                'drop_pending_updates': True
            },
            timeout=10
        )
        response.raise_for_status()
        logger.info(f"Webhook set to: {webhook_url}")
        return True
    except Exception as e:
        logger.error(f"Webhook setup error: {e}")
        return False


# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def create_connection():
    return sqlite3.connect(
        os.path.join(os.getcwd(), 'users.db'),
        check_same_thread=False,
        timeout=10
    )


def init_db():
    with create_connection() as conn:
        conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                username TEXT,
                password_hash TEXT,
                is_admin BOOLEAN DEFAULT 0,
                prediction_count INTEGER DEFAULT 0,
                registered BOOLEAN DEFAULT 0
            )
        ''')
    conn.commit()
    conn.close()


init_db()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def hash_password(password):
    return bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode('utf-8')


def check_password(hashed, password):
    return bcrypt.checkpw(password.encode(), hashed.encode('utf-8'))


def is_password_strong(password):
    return len(password) >= 8 and any(c.isdigit() for c in password) and any(c.isalpha() for c in password)


def is_registered(chat_id):
    try:
        conn = create_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT registered FROM users WHERE id=?", (chat_id,))
        result = cursor.fetchone()
        conn.close()
        return result and result[0]
    except sqlite3.Error as e:
        logger.error(f"Database error in is_registered: {e}")
        return False


def is_admin(chat_id):
    try:
        conn = create_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT is_admin FROM users WHERE id=?", (chat_id,))
        result = cursor.fetchone()
        conn.close()
        return result and result[0]
    except sqlite3.Error as e:
        logger.error(f"Database error in is_admin: {e}")
        return False


def get_main_menu_keyboard(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üì∏ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    markup.row("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üÜò –ü–æ–º–æ—â—å")
    if is_admin(chat_id):
        markup.row("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    return markup


# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserState:
    AWAIT_PASSWORD_REGISTER = 1
    AWAIT_PASSWORD_LOGIN = 2
    AWAIT_ADMIN_ACTION = 3
    AWAIT_USER_ID_DELETE = 4
    AWAIT_USER_ID_PROMOTE = 5
    AWAIT_USER_ID_RESET = 6


user_states = {}


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def check_registration(func):
    def wrapper(message):
        if not is_registered(message.chat.id):
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /register")
            return
        return func(message)

    return wrapper


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def send_welcome(message):
    chat_id = message.chat.id
    if is_registered(chat_id):
        show_main_menu(chat_id)
    else:
        bot.send_message(chat_id,
                         "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
                         "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞")


def show_main_menu(chat_id):
    text = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    bot.send_message(chat_id, text, reply_markup=get_main_menu_keyboard(chat_id))


@bot.message_handler(commands=['register'])
def register_user(message):
    chat_id = message.chat.id
    if is_registered(chat_id):
        bot.send_message(chat_id, "‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return

    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users WHERE id=?", (chat_id,))

    if cursor.fetchone():
        bot.send_message(chat_id, "‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    else:
        user_states[chat_id] = UserState.AWAIT_PASSWORD_REGISTER
        bot.send_message(chat_id,
                         "üîê –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã):")
    conn.close()


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == UserState.AWAIT_PASSWORD_REGISTER)
def process_password(message):
    chat_id = message.chat.id
    password = message.text

    if not is_password_strong(password):
        bot.send_message(chat_id, "‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã.")
        return

    conn = create_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT id FROM users WHERE is_admin=1 LIMIT 1")
    is_admin_flag = 0 if cursor.fetchone() else 1

    cursor.execute('''
        INSERT INTO users 
        (id, username, password_hash, is_admin, registered)
        VALUES (?, ?, ?, ?, 1)
    ''', (chat_id, message.from_user.username, hash_password(password), is_admin_flag))

    conn.commit()
    conn.close()
    del user_states[chat_id]

    # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    text = "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!"
    if is_admin(chat_id):
        text += "\n‚ö° –í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —Ç–∞–∫ –∫–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–µ—Ä–≤—ã–º!"

    bot.send_message(chat_id, text)
    show_main_menu(chat_id)


@bot.message_handler(commands=['login'])
def login_user(message):
    chat_id = message.chat.id
    user_states[chat_id] = UserState.AWAIT_PASSWORD_LOGIN
    bot.send_message(chat_id, "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == UserState.AWAIT_PASSWORD_LOGIN)
def process_login(message):
    chat_id = message.chat.id
    password = message.text
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT password_hash FROM users WHERE id=?", (chat_id,))
    result = cursor.fetchone()

    if result and check_password(result[0], password):
        bot.send_message(chat_id, "üîì –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        show_main_menu(chat_id)
    else:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
    conn.close()
    del user_states[chat_id]


@bot.message_handler(commands=['logout'])
@check_registration
def logout_user(message):
    chat_id = message.chat.id
    if chat_id in user_states:
        del user_states[chat_id]
    bot.send_message(chat_id, "üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã", reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(commands=['admin'])
@check_registration
def admin_panel(message):
    chat_id = message.chat.id
    if not is_admin(chat_id):
        bot.send_message(chat_id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    markup.row("üëë –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å")
    markup.row("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    user_states[chat_id] = UserState.AWAIT_ADMIN_ACTION
    bot.send_message(chat_id, "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "üì∏ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
@check_registration
def predict_image_handler(message):
    bot.send_message(message.chat.id, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")


@bot.message_handler(func=lambda message: message.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@check_registration
def show_stats_handler(message):
    chat_id = message.chat.id
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT prediction_count FROM users WHERE id=?", (chat_id,))
    count = cursor.fetchone()[0]
    conn.close()
    bot.send_message(chat_id, f"üìä –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ {count} –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π")


@bot.message_handler(func=lambda message: message.text == "üÜò –ü–æ–º–æ—â—å")
@check_registration
def show_help(message):
    chat_id = message.chat.id
    text = (
        "üÜò –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/login - –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç\n"
        "/logout - –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
        "üì∏ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á–µ–ª–æ–≤–µ–∫ –∏–ª–∏ –¥–µ–ª—å—Ñ–∏–Ω –Ω–∞ —Ñ–æ—Ç–æ\n"
        "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π\n"
    )
    if is_admin(chat_id):
        text += "/admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
    bot.send_message(chat_id, text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏–π
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == UserState.AWAIT_ADMIN_ACTION)
def handle_admin_actions(message):
    chat_id = message.chat.id

    if message.text == "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
        conn = create_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT id, username, is_admin, prediction_count FROM users")
        users = cursor.fetchall()
        response = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users:
            response += (
                f"üÜî ID: {user[0]}\n"
                f"üë§ –ò–º—è: {user[1]}\n"
                f"üëë –ê–¥–º–∏–Ω: {'–î–∞' if user[2] else '–ù–µ—Ç'}\n"
                f"üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {user[3]}\n\n"
            )
        conn.close()
        bot.send_message(chat_id, response)

    elif message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        user_states[chat_id] = UserState.AWAIT_USER_ID_DELETE
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

    elif message.text == "üëë –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
        user_states[chat_id] = UserState.AWAIT_USER_ID_PROMOTE
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è:")

    elif message.text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å":
        user_states[chat_id] = UserState.AWAIT_USER_ID_RESET
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:")

    elif message.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        del user_states[chat_id]
        show_main_menu(chat_id)


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == UserState.AWAIT_USER_ID_DELETE)
def process_user_delete(message):
    chat_id = message.chat.id
    try:
        user_id = int(message.text)
        conn = create_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM users WHERE id=?", (user_id,))
        conn.commit()
        conn.close()
        bot.send_message(chat_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
    finally:
        del user_states[chat_id]


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == UserState.AWAIT_USER_ID_PROMOTE)
def process_user_promote(message):
    chat_id = message.chat.id
    try:
        user_id = int(message.text)
        conn = create_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET is_admin=1 WHERE id=?", (user_id,))
        conn.commit()
        conn.close()
        bot.send_message(chat_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å—Ç–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    finally:
        del user_states[chat_id]


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == UserState.AWAIT_USER_ID_RESET)
def process_password_reset(message):
    chat_id = message.chat.id
    try:
        user_id = int(message.text)
        temp_pass = "temp123"
        conn = create_connection()
        cursor = conn.cursor()
        cursor.execute(
            "UPDATE users SET password_hash=? WHERE id=?",
            (hash_password(temp_pass), user_id))
        conn.commit()
        conn.close()
        bot.send_message(chat_id, f"‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω. –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {temp_pass}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: {e}")
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è")
    finally:
        del user_states[chat_id]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@bot.message_handler(content_types=['photo'])
@check_registration
def handle_photo(message):
    chat_id = message.chat.id
    try:
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded = bot.download_file(file_info.file_path)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –¥–∏—Å–∫
        img = load_img(io.BytesIO(downloaded), target_size=(200, 200))
        x = img_to_array(img)
        x = np.expand_dims(x, axis=0) / 255.0

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        if model:
            pred = model.predict(x)[0][0]
            result = "–¥–µ–ª—å—Ñ–∏–Ω" if pred > 0.5 else "—á–µ–ª–æ–≤–µ–∫"
            confidence = pred if pred > 0.5 else 1 - pred
            response = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç: {result} ({confidence:.1%})"
        else:
            response = "‚ùå –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏"

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        with create_connection() as conn:
            conn.execute("UPDATE users SET prediction_count = prediction_count + 1 WHERE id=?", (chat_id,))

        bot.reply_to(message, response)

    except Exception as e:
        logger.error(f"Image processing error: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")


if __name__ == '__main__':
    init_db()

    if set_telegram_webhook():
        app.run(
            host='0.0.0.0',
            port=PORT,
            debug=False,
            use_reloader=False
        )
    else:
        logger.error("Failed to start due to webhook setup error")
